; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26732.1 

	TITLE	D:\edx\Raytracer\Raytracer\math.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F5BEA528_vcruntime_new@h DB 01H
__FE874262_stdlib@h DB 01H
__EDC08FAA_corecrt_math@h DB 01H
__7F2C8695_cstdlib DB 01H
__429E0B2B_xtgmath@h DB 01H
__0514C0B9_cmath DB 01H
__320E01E0_corecrt_stdio_config@h DB 01H
__BAC7FC50_corecrt_wstdio@h DB 01H
__A3797CDC_stdio@h DB 01H
__07523DAF_corecrt_memcpy_s@h DB 01H
__9F081559_corecrt_memory@h DB 01H
__9CE3A74D_corecrt_wstring@h DB 01H
__78F4D6C6_string@h DB 01H
__97E4A401_type_traits DB 01H
__6AAA6594_malloc@h DB 01H
__50F2368E_vcruntime_exception@h DB 01H
__0CE11248_exception DB 01H
__FEB88A67_corecrt_wconio@h DB 01H
__BE076D93_corecrt_wio@h DB 01H
__90701A18_corecrt_wtime@h DB 01H
__33831CCF_stat@h DB 01H
__5D5F9F21_wchar@h DB 01H
__C73DF9BD_limits DB 01H
__0BD42C3B_iosfwd DB 01H
__0FCAEBF4_xutility DB 01H
__E443DC4E_xatomic0@h DB 01H
__DE992AA5_xmemory0 DB 01H
__85AF2815_stdexcept DB 01H
__E3481DC3_vcruntime_typeinfo@h DB 01H
__7C512EE2_ctype@h DB 01H
__609CFB25_xlocinfo DB 01H
__7B93F533_memory DB 01H
__57D6A23C_xfacet DB 01H
__89599270_xlocale DB 01H
__9FC9054D_xcall_once@h DB 01H
__2094176D_system_error DB 01H
__59798C36_xiosbase DB 01H
__17DEF467_xlocnum DB 01H
__5AEE7674_ios DB 01H
__AD03B415_math@h DB 01H
__88D6DBA9_math@cpp DB 01H
__5667E641_xstring DB 01H
__F9997D8E_istream DB 01H
__9A4948B4_ostream DB 01H
__870F90A9_streambuf DB 01H
__4821031E_utility DB 01H
__BF3E940C_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0Vec3@@QAE@XZ					; Vec3::Vec3
PUBLIC	??0Vec3@@QAE@MMM@Z				; Vec3::Vec3
PUBLIC	?magnitude@Vec3@@QAE?BMXZ			; Vec3::magnitude
PUBLIC	?normalize@Vec3@@QAE?AV1@XZ			; Vec3::normalize
PUBLIC	?print@Vec3@@QAEXXZ				; Vec3::print
PUBLIC	??AVec3@@QAEAAMH@Z				; Vec3::operator[]
PUBLIC	??H@YA?BVVec3@@ABV0@0@Z				; operator+
PUBLIC	??G@YA?BVVec3@@ABV0@0@Z				; operator-
PUBLIC	??D@YA?BVVec3@@MABV0@@Z				; operator*
PUBLIC	??D@YA?BVVec3@@ABV0@M@Z				; operator*
PUBLIC	??K@YA?BVVec3@@ABV0@M@Z				; operator/
PUBLIC	??0Normal@@QAE@XZ				; Normal::Normal
PUBLIC	??0Normal@@QAE@MMM@Z				; Normal::Normal
PUBLIC	??0Normal@@QAE@VVec3@@@Z			; Normal::Normal
PUBLIC	?print@Normal@@QAEXXZ				; Normal::print
PUBLIC	??ANormal@@QAEAAMH@Z				; Normal::operator[]
PUBLIC	??H@YA?BVNormal@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?BVNormal@@ABV0@0@Z			; operator-
PUBLIC	??0Point@@QAE@XZ				; Point::Point
PUBLIC	??0Point@@QAE@MMM@Z				; Point::Point
PUBLIC	?print@Point@@QAEXXZ				; Point::print
PUBLIC	??APoint@@QAEAAMH@Z				; Point::operator[]
PUBLIC	??H@YA?BVPoint@@ABV0@ABVVec3@@@Z		; operator+
PUBLIC	??G@YA?BVPoint@@ABV0@ABVVec3@@@Z		; operator-
PUBLIC	??H@YA?BVVec3@@ABVPoint@@0@Z			; operator+
PUBLIC	??0Ray@@QAE@VPoint@@VVec3@@@Z			; Ray::Ray
PUBLIC	??0Ray@@QAE@VVec3@@@Z				; Ray::Ray
PUBLIC	?pointAt@Ray@@QAE?AVPoint@@M@Z			; Ray::pointAt
PUBLIC	??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z			; Mat4::Mat4
PUBLIC	??0Mat4@@QAE@M@Z				; Mat4::Mat4
PUBLIC	??0Mat4@@QAE@XZ					; Mat4::Mat4
PUBLIC	?print@Mat4@@QAEXXZ				; Mat4::print
PUBLIC	?inverse@Mat4@@QAE?AV1@XZ			; Mat4::inverse
PUBLIC	?swapRow@Mat4@@QAEXHH@Z				; Mat4::swapRow
PUBLIC	??AMat4@@QAEPAMH@Z				; Mat4::operator[]
PUBLIC	??H@YA?AVMat4@@AAV0@0@Z				; operator+
PUBLIC	??G@YA?AVMat4@@AAV0@0@Z				; operator-
PUBLIC	??D@YA?AVMat4@@AAV0@0@Z				; operator*
PUBLIC	??D@YA?AVMat4@@MAAV0@@Z				; operator*
PUBLIC	?dot@@YAMAAVVec3@@0@Z				; dot
PUBLIC	?dot@@YAMAAVVec3@@AAVNormal@@@Z			; dot
PUBLIC	?dot@@YAMAAVNormal@@AAVVec3@@@Z			; dot
PUBLIC	?cross@@YA?AVVec3@@ABV1@0@Z			; cross
PUBLIC	_fabsf
PUBLIC	_sqrtf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_02PFNDMDBO@?$FL?5@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN@				; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PFNDMDBO@?$FL?5@
CONST	SEGMENT
??_C@_02PFNDMDBO@?$FL?5@ DB '[ ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?sqrt@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?abs@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 135
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 137
	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@sentry
; Line 139
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:
; Line 144
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 121
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 120
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 122
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR __Ostr$[ebp]
	je	SHORT $LN2@sentry
; Line 123
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry:
; Line 124
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al
; Line 125
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 105
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@Sentry_bas
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv86[ebp], ecx
	mov	edx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv86[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Sentry_bas:
; Line 108
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Sentry_bas
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Sentry_bas:
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 1019
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 1020
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1021
	mov	esi, esp
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1022
	mov	eax, DWORD PTR __Ostr$[ebp]
; Line 1023
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 790
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 793
	mov	DWORD PTR __State$[ebp], 0
; Line 794
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx
; Line 795
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv329[ebp], eax
	mov	DWORD PTR tv329[ebp+4], edx
	cmp	DWORD PTR tv329[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv329[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv343[ebp], eax
	mov	DWORD PTR tv343[ebp+4], edx
	mov	eax, DWORD PTR tv343[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv343[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx
; Line 797
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 799
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator
; Line 800
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 801
	jmp	$LN9@operator
$LN8@operator:
; Line 803
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 804
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator
; Line 805
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN26@operator:
; Line 806
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv284[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv285[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv284[ebp]
	push	eax
	mov	ecx, DWORD PTR tv285[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv286[ebp], eax
	mov	ecx, DWORD PTR tv286[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator
; Line 809
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 810
	jmp	SHORT $LN11@operator
$LN12@operator:
; Line 813
	jmp	$LN2@operator
$LN11@operator:
; Line 814
	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN13@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN13@operator
$LN27@operator:
; Line 815
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN13@operator:
; Line 817
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN14@operator
; Line 818
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN14@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN14@operator
$LN28@operator:
; Line 819
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@operator
; Line 822
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 823
	jmp	SHORT $LN14@operator
$LN15@operator:
; Line 824
	jmp	$LN5@operator
$LN14@operator:
; Line 825
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:
; Line 826
	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN9@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:
; Line 829
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 830
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]
; Line 831
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@operator:
	DD	1
	DD	$LN31@operator
$LN31@operator:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN29@operator
$LN29@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 540
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eof@?$char_traits@D@std@@SAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 541
	or	eax, -1
; Line 542
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$char_traits@D@std@@SAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 530
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 531
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]
; Line 532
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 460
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 464
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
; Line 466
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\cmath
; Line 294
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sqrt@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0514C0B9_cmath
	call	@__CheckForDebuggerJustMyCode@4
; Line 295
	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
; Line 296
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?sqrt@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sqrt@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?abs@@YAMM@Z PROC					; abs, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\cstdlib
; Line 25
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?abs@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __7F2C8695_cstdlib
	call	@__CheckForDebuggerJustMyCode@4
; Line 26
	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?abs@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?abs@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?abs@@YAMM@Z ENDP					; abs
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; Line 759
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EDC08FAA_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4
; Line 760
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
; Line 761
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _fabsf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; Line 671
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EDC08FAA_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4
; Line 672
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
; Line 673
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?cross@@YA?AVVec3@@ABV1@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?cross@@YA?AVVec3@@ABV1@0@Z PROC			; cross, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 342
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 343
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cross@@YA?AVVec3@@ABV1@0@Z ENDP			; cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@@YAMAAVNormal@@AAVVec3@@@Z
_TEXT	SEGMENT
tv86 = -196						; size = 4
_n$ = 8							; size = 4
_v$ = 12						; size = 4
?dot@@YAMAAVNormal@@AAVVec3@@@Z PROC			; dot, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 339
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]
; Line 340
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dot@@YAMAAVNormal@@AAVVec3@@@Z ENDP			; dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@@YAMAAVVec3@@AAVNormal@@@Z
_TEXT	SEGMENT
tv86 = -196						; size = 4
_v$ = 8							; size = 4
_n$ = 12						; size = 4
?dot@@YAMAAVVec3@@AAVNormal@@@Z PROC			; dot, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 336
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]
; Line 337
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dot@@YAMAAVVec3@@AAVNormal@@@Z ENDP			; dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@@YAMAAVVec3@@0@Z
_TEXT	SEGMENT
tv86 = -196						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?dot@@YAMAAVVec3@@0@Z PROC				; dot, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 333
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]
; Line 334
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dot@@YAMAAVVec3@@0@Z ENDP				; dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVMat4@@MAAV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_scaler$ = 12						; size = 4
_m$ = 16						; size = 4
??D@YA?AVMat4@@MAAV0@@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 310
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 311
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z		; Mat4::Mat4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 329
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVMat4@@MAAV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVMat4@@AAV0@0@Z
_TEXT	SEGMENT
tv88 = -308						; size = 4
_k$1 = -108						; size = 4
_j$2 = -96						; size = 4
_i$3 = -84						; size = 4
_retMat$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??D@YA?AVMat4@@AAV0@0@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 300
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??0Mat4@@QAE@M@Z			; Mat4::Mat4
; Line 301
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _i$3[ebp], 4
	jge	$LN3@operator
; Line 302
	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN7@operator:
	cmp	DWORD PTR _j$2[ebp], 4
	jge	SHORT $LN6@operator
; Line 303
	mov	DWORD PTR _k$1[ebp], 0
	jmp	SHORT $LN10@operator
$LN8@operator:
	mov	eax, DWORD PTR _k$1[ebp]
	add	eax, 1
	mov	DWORD PTR _k$1[ebp], eax
$LN10@operator:
	cmp	DWORD PTR _k$1[ebp], 4
	jge	SHORT $LN9@operator
; Line 304
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _j$2[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, DWORD PTR _k$1[ebp]
	mov	ecx, DWORD PTR _j$2[ebp]
	movss	xmm0, DWORD PTR [esi+edx*4]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR tv88[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR tv88[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 305
	jmp	SHORT $LN8@operator
$LN9@operator:
; Line 306
	jmp	$LN5@operator
$LN6@operator:
; Line 307
	jmp	$LN2@operator
$LN3@operator:
; Line 308
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _retMat$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@operator:
	DD	1
	DD	$LN13@operator
$LN13@operator:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN12@operator
$LN12@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??D@YA?AVMat4@@AAV0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?AVMat4@@AAV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??G@YA?AVMat4@@AAV0@0@Z PROC				; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 280
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	subss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z		; Mat4::Mat4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 298
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVMat4@@AAV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?AVMat4@@AAV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??H@YA?AVMat4@@AAV0@0@Z PROC				; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 260
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	3
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	2
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	1
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 3
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 1
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	edi, 4
	shl	edi, 0
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	eax, 4
	imul	edi, eax, 0
	push	0
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [esi+edi]
	addss	xmm0, DWORD PTR [eax+edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z		; Mat4::Mat4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 278
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVMat4@@AAV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AMat4@@QAEPAMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_row$ = 8						; size = 4
??AMat4@@QAEPAMH@Z PROC					; Mat4::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 255
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 256
	mov	eax, DWORD PTR _row$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 257
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AMat4@@QAEPAMH@Z ENDP					; Mat4::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swapRow@Mat4@@QAEXHH@Z
_TEXT	SEGMENT
_j$1 = -44						; size = 4
_temp$ = -32						; size = 16
_this$ = -8						; size = 4
_row1$ = 8						; size = 4
_row2$ = 12						; size = 4
?swapRow@Mat4@@QAEXHH@Z PROC				; Mat4::swapRow, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 211
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN4@swapRow
$LN2@swapRow:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN4@swapRow:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN3@swapRow
; Line 212
	mov	eax, DWORD PTR _row1$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _temp$[ebp+ecx*4], eax
; Line 213
	mov	eax, DWORD PTR _row2$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _row1$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	esi, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 214
	mov	eax, DWORD PTR _row2$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _temp$[ebp+edx*4]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 215
	jmp	SHORT $LN2@swapRow
$LN3@swapRow:
; Line 216
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@swapRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN8@swapRow:
	DD	1
	DD	$LN7@swapRow
$LN7@swapRow:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@swapRow
$LN6@swapRow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?swapRow@Mat4@@QAEXHH@Z ENDP				; Mat4::swapRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?inverse@Mat4@@QAE?AV1@XZ
_TEXT	SEGMENT
tv285 = -500						; size = 4
tv283 = -500						; size = 4
tv281 = -500						; size = 4
tv279 = -500						; size = 4
$T1 = -492						; size = 64
_k$2 = -228						; size = 4
_j$3 = -216						; size = 4
_j$4 = -204						; size = 4
_scaler$5 = -192					; size = 4
_j$6 = -180						; size = 4
_i$7 = -168						; size = 4
_reduce$ = -156						; size = 64
_inverse$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?inverse@Mat4@@QAE?AV1@XZ PROC				; Mat4::inverse, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 220
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??0Mat4@@QAE@M@Z			; Mat4::Mat4
; Line 221
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _this$[ebp]
	lea	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR _reduce$[ebp]
	rep movsd
; Line 223
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@inverse
$LN2@inverse:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN4@inverse:
	cmp	DWORD PTR _i$7[ebp], 4
	jge	$LN3@inverse
; Line 225
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN6@inverse
; Line 226
	mov	DWORD PTR _j$6[ebp], 3
	jmp	SHORT $LN7@inverse
$LN5@inverse:
	mov	eax, DWORD PTR _j$6[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$6[ebp], eax
$LN7@inverse:
	cmp	DWORD PTR _j$6[ebp], -1
	jle	SHORT $LN6@inverse
; Line 227
	mov	eax, DWORD PTR _j$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN18@inverse
; Line 228
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	?swapRow@Mat4@@QAEXHH@Z			; Mat4::swapRow
; Line 229
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	?swapRow@Mat4@@QAEXHH@Z			; Mat4::swapRow
; Line 230
	jmp	SHORT $LN6@inverse
$LN18@inverse:
; Line 232
	jmp	SHORT $LN5@inverse
$LN6@inverse:
; Line 235
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _scaler$5[ebp], xmm0
; Line 237
	mov	DWORD PTR _j$4[ebp], 0
	jmp	SHORT $LN10@inverse
$LN8@inverse:
	mov	eax, DWORD PTR _j$4[ebp]
	add	eax, 1
	mov	DWORD PTR _j$4[ebp], eax
$LN10@inverse:
	cmp	DWORD PTR _j$4[ebp], 4
	jge	$LN9@inverse
; Line 238
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	divss	xmm0, DWORD PTR _scaler$5[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	lea	ecx, DWORD PTR _reduce$[ebp]
	movss	DWORD PTR tv279[ebp], xmm0
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 239
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	divss	xmm0, DWORD PTR _scaler$5[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	lea	ecx, DWORD PTR _inverse$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 240
	jmp	$LN8@inverse
$LN9@inverse:
; Line 242
	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN13@inverse
$LN11@inverse:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN13@inverse:
	cmp	DWORD PTR _j$3[ebp], 4
	jge	$LN12@inverse
; Line 243
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR _i$7[ebp]
	je	$LN15@inverse
; Line 244
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _scaler$5[ebp], xmm0
; Line 245
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN16@inverse
$LN14@inverse:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 1
	mov	DWORD PTR _k$2[ebp], eax
$LN16@inverse:
	cmp	DWORD PTR _k$2[ebp], 4
	jge	$LN15@inverse
; Line 246
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	movss	xmm0, DWORD PTR _scaler$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _k$2[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _k$2[ebp]
	addss	xmm0, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR _j$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reduce$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, DWORD PTR _k$2[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 247
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	movss	xmm0, DWORD PTR _scaler$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _k$2[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _k$2[ebp]
	addss	xmm0, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR _j$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inverse$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	??AMat4@@QAEPAMH@Z			; Mat4::operator[]
	mov	edx, DWORD PTR _k$2[ebp]
	movss	xmm0, DWORD PTR tv285[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 248
	jmp	$LN14@inverse
$LN15@inverse:
; Line 250
	jmp	$LN11@inverse
$LN12@inverse:
; Line 251
	jmp	$LN2@inverse
$LN3@inverse:
; Line 252
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _inverse$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 253
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN24@inverse:
	DD	2
	DD	$LN23@inverse
$LN23@inverse:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN21@inverse
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN22@inverse
$LN22@inverse:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN21@inverse:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
?inverse@Mat4@@QAE?AV1@XZ ENDP				; Mat4::inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Mat4@@QAEXXZ
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?print@Mat4@@QAEXXZ PROC				; Mat4::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 200
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@print
$LN2@print:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@print:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	$LN3@print
; Line 201
	push	OFFSET ??_C@_02PFNDMDBO@?$FL?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 202
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@print
$LN5@print:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@print:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@print
; Line 203
	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 204
	jmp	SHORT $LN5@print
$LN6@print:
; Line 205
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 206
	jmp	$LN2@print
$LN3@print:
; Line 207
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Mat4@@QAEXXZ ENDP				; Mat4::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Mat4@@QAE@XZ PROC					; Mat4::Mat4, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 181
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 182
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 183
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 184
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 185
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 186
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 187
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 188
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 189
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 190
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 191
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 192
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 193
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 194
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 195
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 196
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Mat4@@QAE@XZ ENDP					; Mat4::Mat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_f$ = 8							; size = 4
??0Mat4@@QAE@M@Z PROC					; Mat4::Mat4, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 163
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _f$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 164
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 165
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 166
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 167
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 168
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _f$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 169
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 170
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 171
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 172
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
; Line 173
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _f$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 174
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
; Line 175
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
; Line 176
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 177
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
; Line 178
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _f$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Mat4@@QAE@M@Z ENDP					; Mat4::Mat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m00$ = 8						; size = 4
_m01$ = 12						; size = 4
_m02$ = 16						; size = 4
_m03$ = 20						; size = 4
_m10$ = 24						; size = 4
_m11$ = 28						; size = 4
_m12$ = 32						; size = 4
_m13$ = 36						; size = 4
_m20$ = 40						; size = 4
_m21$ = 44						; size = 4
_m22$ = 48						; size = 4
_m23$ = 52						; size = 4
_m30$ = 56						; size = 4
_m31$ = 60						; size = 4
_m32$ = 64						; size = 4
_m33$ = 68						; size = 4
??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z PROC			; Mat4::Mat4, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 145
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _m00$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 146
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _m01$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 147
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m02$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 148
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _m03$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 149
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _m10$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 150
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m11$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 151
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m12$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 152
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _m13$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 153
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _m20$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 154
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m21$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 155
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m22$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 156
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _m23$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 157
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _m30$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 158
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _m31$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 159
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _m32$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 160
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _m33$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 161
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0Mat4@@QAE@MMMMMMMMMMMMMMMM@Z ENDP			; Mat4::Mat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pointAt@Ray@@QAE?AVPoint@@M@Z
_TEXT	SEGMENT
$T1 = -260						; size = 12
$T2 = -240						; size = 12
$T3 = -220						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_t$ = 12						; size = 4
?pointAt@Ray@@QAE?AVPoint@@M@Z PROC			; Ray::pointAt, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 135
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR [eax+28]
	jbe	SHORT $LN2@pointAt
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??D@YA?BVVec3@@MABV0@@Z			; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??H@YA?BVPoint@@ABV0@ABVVec3@@@Z	; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@pointAt
	jmp	SHORT $LN5@pointAt
$LN2@pointAt:
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR _t$[ebp]
	jbe	SHORT $LN4@pointAt
; Line 138
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??D@YA?BVVec3@@MABV0@@Z			; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??H@YA?BVPoint@@ABV0@ABVVec3@@@Z	; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@pointAt
; Line 139
	jmp	SHORT $LN5@pointAt
$LN4@pointAt:
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?BVVec3@@MABV0@@Z			; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??H@YA?BVPoint@@ABV0@ABVVec3@@@Z	; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@pointAt:
; Line 141
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?pointAt@Ray@@QAE?AVPoint@@M@Z ENDP			; Ray::pointAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Ray@@QAE@VVec3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_direction$ = 8						; size = 12
??0Ray@@QAE@VVec3@@@Z PROC				; Ray::Ray, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Point@@QAE@XZ			; Point::Point
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _direction$[ebp]
	call	?normalize@Vec3@@QAE?AV1@XZ		; Vec3::normalize
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Ray@@QAE@VVec3@@@Z ENDP				; Ray::Ray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Ray@@QAE@VPoint@@VVec3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_origin$ = 8						; size = 12
_direction$ = 20					; size = 12
??0Ray@@QAE@VPoint@@VVec3@@@Z PROC			; Ray::Ray, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _origin$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _origin$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _direction$[ebp]
	call	?normalize@Vec3@@QAE?AV1@XZ		; Vec3::normalize
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Ray@@QAE@VPoint@@VVec3@@@Z ENDP			; Ray::Ray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?BVVec3@@ABVPoint@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
??H@YA?BVVec3@@ABVPoint@@0@Z PROC			; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 113
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p2$[ebp]
	mov	eax, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR _p1$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 114
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?BVVec3@@ABVPoint@@0@Z ENDP			; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?BVPoint@@ABV0@ABVVec3@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
_v$ = 16						; size = 4
??G@YA?BVPoint@@ABV0@ABVVec3@@@Z PROC			; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 110
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Point@@QAE@MMM@Z			; Point::Point
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 111
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?BVPoint@@ABV0@ABVVec3@@@Z ENDP			; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?BVPoint@@ABV0@ABVVec3@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
_v$ = 16						; size = 4
??H@YA?BVPoint@@ABV0@ABVVec3@@@Z PROC			; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 107
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Point@@QAE@MMM@Z			; Point::Point
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 108
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?BVPoint@@ABV0@ABVVec3@@@Z ENDP			; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??APoint@@QAEAAMH@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??APoint@@QAEAAMH@Z PROC				; Point::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 117
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@operator
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN6@operator
	jmp	SHORT $LN1@operator
$LN4@operator:
; Line 120
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:
; Line 124
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
$LN1@operator:
; Line 128
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??APoint@@QAEAAMH@Z ENDP				; Point::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Point@@QAEXXZ
_TEXT	SEGMENT
tv149 = -208						; size = 4
_this$ = -8						; size = 4
?print@Point@@QAEXXZ PROC				; Point::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 103
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ@
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ebx, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	eax, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_01ODHLEDKK@?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	mov	DWORD PTR tv149[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv149[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Point@@QAEXXZ ENDP				; Point::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Point@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Point@@QAE@MMM@Z PROC				; Point::Point, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Point@@QAE@MMM@Z ENDP				; Point::Point
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Point@@QAE@XZ PROC					; Point::Point, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Point@@QAE@XZ ENDP					; Point::Point
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?BVNormal@@ABV0@0@Z
_TEXT	SEGMENT
_sum$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_n1$ = 12						; size = 4
_n2$ = 16						; size = 4
??G@YA?BVNormal@@ABV0@0@Z PROC				; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 94
	mov	eax, DWORD PTR _n1$[ebp]
	mov	ecx, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _n1$[ebp]
	mov	eax, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _n1$[ebp]
	mov	edx, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _sum$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
; Line 95
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sum$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _sum$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Normal@@QAE@VVec3@@@Z		; Normal::Normal
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 96
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@operator
$LN3@operator:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
??G@YA?BVNormal@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?BVNormal@@ABV0@0@Z
_TEXT	SEGMENT
_sum$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_n1$ = 12						; size = 4
_n2$ = 16						; size = 4
??H@YA?BVNormal@@ABV0@0@Z PROC				; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 90
	mov	eax, DWORD PTR _n1$[ebp]
	mov	ecx, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _n1$[ebp]
	mov	eax, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _n1$[ebp]
	mov	edx, DWORD PTR _n2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _sum$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
; Line 91
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sum$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _sum$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Normal@@QAE@VVec3@@@Z		; Normal::Normal
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 92
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@operator
$LN3@operator:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
??H@YA?BVNormal@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??ANormal@@QAEAAMH@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??ANormal@@QAEAAMH@Z PROC				; Normal::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 72
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@operator
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN6@operator
	jmp	SHORT $LN1@operator
$LN4@operator:
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:
; Line 77
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
$LN1@operator:
; Line 83
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ANormal@@QAEAAMH@Z ENDP				; Normal::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Normal@@QAEXXZ
_TEXT	SEGMENT
tv149 = -208						; size = 4
_this$ = -8						; size = 4
?print@Normal@@QAEXXZ PROC				; Normal::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 86
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ebx, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	eax, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_01MNNFJEPP@?$DM@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	mov	DWORD PTR tv149[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv149[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 87
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Normal@@QAEXXZ ENDP				; Normal::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Normal@@QAE@VVec3@@@Z
_TEXT	SEGMENT
$T1 = -220						; size = 12
_this$ = -8						; size = 4
_v$ = 8							; size = 12
??0Normal@@QAE@VVec3@@@Z PROC				; Normal::Normal, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 65
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	call	?normalize@Vec3@@QAE?AV1@XZ		; Vec3::normalize
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], eax
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp+4]
	movss	DWORD PTR [eax+4], xmm0
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp+8]
	movss	DWORD PTR [eax+8], xmm0
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Normal@@QAE@VVec3@@@Z ENDP				; Normal::Normal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Normal@@QAE@MMM@Z
_TEXT	SEGMENT
_norm$ = -20						; size = 4
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Normal@@QAE@MMM@Z PROC				; Normal::Normal, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 59
	movss	xmm0, DWORD PTR __x$[ebp]
	mulss	xmm0, DWORD PTR __x$[ebp]
	movss	xmm1, DWORD PTR __y$[ebp]
	mulss	xmm1, DWORD PTR __y$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __z$[ebp]
	mulss	xmm1, DWORD PTR __z$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _norm$[ebp]
; Line 60
	movss	xmm0, DWORD PTR __x$[ebp]
	divss	xmm0, DWORD PTR _norm$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 61
	movss	xmm0, DWORD PTR __y$[ebp]
	divss	xmm0, DWORD PTR _norm$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0
; Line 62
	movss	xmm0, DWORD PTR __z$[ebp]
	divss	xmm0, DWORD PTR _norm$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Normal@@QAE@MMM@Z ENDP				; Normal::Normal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Normal@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Normal@@QAE@XZ PROC					; Normal::Normal, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Normal@@QAE@XZ ENDP					; Normal::Normal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??K@YA?BVVec3@@ABV0@M@Z
_TEXT	SEGMENT
tv84 = -196						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_scaler$ = 16						; size = 4
??K@YA?BVVec3@@ABV0@M@Z PROC				; operator/, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 49
	push	ecx
	movss	xmm0, DWORD PTR _scaler$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR tv84[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@operator
; Line 50
	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@operator
; Line 51
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 52
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@operator:
; Line 53
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??K@YA?BVVec3@@ABV0@M@Z ENDP				; operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?BVVec3@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_scaler$ = 16						; size = 4
??D@YA?BVVec3@@ABV0@M@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 46
	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 47
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?BVVec3@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?BVVec3@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_scaler$ = 12						; size = 4
_v1$ = 16						; size = 4
??D@YA?BVVec3@@MABV0@@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 43
	mov	eax, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	movss	xmm0, DWORD PTR _scaler$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 44
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?BVVec3@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?BVVec3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?BVVec3@@ABV0@0@Z PROC				; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 40
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 41
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?BVVec3@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?BVVec3@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??H@YA?BVVec3@@ABV0@0@Z PROC				; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 37
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 38
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?BVVec3@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AVec3@@QAEAAMH@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??AVec3@@QAEAAMH@Z PROC					; Vec3::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 23
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@operator
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@operator
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN6@operator
	jmp	SHORT $LN1@operator
$LN4@operator:
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN5@operator:
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN6@operator:
; Line 30
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
$LN1@operator:
; Line 34
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AVec3@@QAEAAMH@Z ENDP					; Vec3::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Vec3@@QAEXXZ
_TEXT	SEGMENT
tv149 = -208						; size = 4
_this$ = -8						; size = 4
?print@Vec3@@QAEXXZ PROC				; Vec3::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 20
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ebx, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	eax, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_01MNNFJEPP@?$DM@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	mov	DWORD PTR tv149[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv149[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 21
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Vec3@@QAEXXZ ENDP				; Vec3::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalize@Vec3@@QAE?AV1@XZ
_TEXT	SEGMENT
tv94 = -220						; size = 4
_norm$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalize@Vec3@@QAE?AV1@XZ PROC			; Vec3::normalize, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 13
	mov	ecx, DWORD PTR _this$[ebp]
	call	?magnitude@Vec3@@QAE?BMXZ		; Vec3::magnitude
	fstp	DWORD PTR _norm$[ebp]
; Line 14
	push	ecx
	movss	xmm0, DWORD PTR _norm$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR tv94[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@normalize
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@normalize
; Line 16
	jmp	SHORT $LN3@normalize
$LN2@normalize:
; Line 17
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3@@QAE@MMM@Z			; Vec3::Vec3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@normalize:
; Line 18
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@Vec3@@QAE?AV1@XZ ENDP			; Vec3::normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?magnitude@Vec3@@QAE?BMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?magnitude@Vec3@@QAE?BMXZ PROC				; Vec3::magnitude, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 10
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
; Line 11
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?magnitude@Vec3@@QAE?BMXZ ENDP				; Vec3::magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3@@QAE@MMM@Z PROC					; Vec3::Vec3, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 7
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3@@QAE@MMM@Z ENDP					; Vec3::Vec3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vec3@@QAE@XZ PROC					; Vec3::Vec3, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3@@QAE@XZ ENDP					; Vec3::Vec3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
; File d:\edx\raytracer\raytracer\math.cpp
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __88D6DBA9_math@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
