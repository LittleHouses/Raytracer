; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26732.1 

	TITLE	D:\edx\Raytracer\Raytracer\math_old.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F5BEA528_vcruntime_new@h DB 01H
__FE874262_stdlib@h DB 01H
__EDC08FAA_corecrt_math@h DB 01H
__7F2C8695_cstdlib DB 01H
__429E0B2B_xtgmath@h DB 01H
__0514C0B9_cmath DB 01H
__22C4B482_math_old@h DB 01H
__320E01E0_corecrt_stdio_config@h DB 01H
__BAC7FC50_corecrt_wstdio@h DB 01H
__A3797CDC_stdio@h DB 01H
__07523DAF_corecrt_memcpy_s@h DB 01H
__9F081559_corecrt_memory@h DB 01H
__9CE3A74D_corecrt_wstring@h DB 01H
__78F4D6C6_string@h DB 01H
__97E4A401_type_traits DB 01H
__6AAA6594_malloc@h DB 01H
__50F2368E_vcruntime_exception@h DB 01H
__0CE11248_exception DB 01H
__FEB88A67_corecrt_wconio@h DB 01H
__BE076D93_corecrt_wio@h DB 01H
__90701A18_corecrt_wtime@h DB 01H
__33831CCF_stat@h DB 01H
__5D5F9F21_wchar@h DB 01H
__C73DF9BD_limits DB 01H
__0BD42C3B_iosfwd DB 01H
__0FCAEBF4_xutility DB 01H
__E443DC4E_xatomic0@h DB 01H
__DE992AA5_xmemory0 DB 01H
__85AF2815_stdexcept DB 01H
__E3481DC3_vcruntime_typeinfo@h DB 01H
__7C512EE2_ctype@h DB 01H
__609CFB25_xlocinfo DB 01H
__7B93F533_memory DB 01H
__57D6A23C_xfacet DB 01H
__89599270_xlocale DB 01H
__9FC9054D_xcall_once@h DB 01H
__2094176D_system_error DB 01H
__59798C36_xiosbase DB 01H
__17DEF467_xlocnum DB 01H
__5AEE7674_ios DB 01H
__B6D648B3_math_old@cpp DB 01H
__5667E641_xstring DB 01H
__F9997D8E_istream DB 01H
__9A4948B4_ostream DB 01H
__870F90A9_streambuf DB 01H
__4821031E_utility DB 01H
__BF3E940C_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_powf
PUBLIC	_sqrtf
PUBLIC	?pow@@YAMMH@Z					; pow
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0Vec4f@@QAE@XZ				; Vec4f::Vec4f
PUBLIC	??0Vec4f@@QAE@MMM@Z				; Vec4f::Vec4f
PUBLIC	?magnitude@Vec4f@@QBEMXZ			; Vec4f::magnitude
PUBLIC	?print@Vec4f@@QAEXXZ				; Vec4f::print
PUBLIC	?dot@Vec4f@@QAEMV1@@Z				; Vec4f::dot
PUBLIC	??AVec4f@@QAEAAMH@Z				; Vec4f::operator[]
PUBLIC	??H@YA?AVVec4f@@ABV0@0@Z			; operator+
PUBLIC	??G@YA?AVVec4f@@ABV0@0@Z			; operator-
PUBLIC	??D@YA?AVVec4f@@ABV0@M@Z			; operator*
PUBLIC	??D@YA?AVVec4f@@MABV0@@Z			; operator*
PUBLIC	??0Point4f@@QAE@XZ				; Point4f::Point4f
PUBLIC	??0Point4f@@QAE@MMMM@Z				; Point4f::Point4f
PUBLIC	??0Point4f@@QAE@ABV0@@Z				; Point4f::Point4f
PUBLIC	?Print@Point4f@@QAEXXZ				; Point4f::Print
PUBLIC	??0Ray@@QAE@ABVPoint4f@@ABVVec4f@@@Z		; Ray::Ray
PUBLIC	?getPointAt@Ray@@QAE?AVPoint4f@@M@Z		; Ray::getPointAt
PUBLIC	??0Mat4f@@QAE@XZ				; Mat4f::Mat4f
PUBLIC	??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z		; Mat4f::Mat4f
PUBLIC	??0Mat4f@@QAE@QAY03$$CBM@Z			; Mat4f::Mat4f
PUBLIC	??AMat4f@@QAEPAMH@Z				; Mat4f::operator[]
PUBLIC	?print@Mat4f@@QAEXXZ				; Mat4f::print
PUBLIC	?identity@Mat4f@@SA?AV1@XZ			; Mat4f::identity
PUBLIC	??H@YA?AVMat4f@@AAV0@0@Z			; operator+
PUBLIC	??G@YA?AVMat4f@@AAV0@0@Z			; operator-
PUBLIC	??D@YA?AVMat4f@@AAV0@0@Z			; operator*
PUBLIC	??D@YA?AVMat4f@@MAAV0@@Z			; operator*
PUBLIC	??D@YA?AVMat4f@@AAV0@M@Z			; operator*
PUBLIC	??D@YA?AVVec4f@@AAVMat4f@@AAV0@@Z		; operator*
PUBLIC	?euclideanDistance@@YAMABVPoint4f@@0@Z		; euclideanDistance
PUBLIC	?dehomogenize@@YA?AVPoint4f@@ABV1@@Z		; dehomogenize
PUBLIC	?normalize@@YA?AVVec4f@@ABV1@@Z			; normalize
PUBLIC	?swapRow@@YAXAAVMat4f@@HH@Z			; swapRow
PUBLIC	?inverse@@YA?AVMat4f@@AAV1@@Z			; inverse
PUBLIC	?factorial@@YAHH@Z				; factorial
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_02PFNDMDBO@?$FL?5@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN@				; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_pow:PROC
EXTRN	_sqrt:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PFNDMDBO@?$FL?5@
CONST	SEGMENT
??_C@_02PFNDMDBO@?$FL?5@ DB '[ ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?sqrt@@YAMM@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?pow@@YAMMH@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 135
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 137
	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@sentry
; Line 139
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:
; Line 144
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 121
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 120
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 122
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR __Ostr$[ebp]
	je	SHORT $LN2@sentry
; Line 123
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry:
; Line 124
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al
; Line 125
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 105
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@Sentry_bas
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv86[ebp], ecx
	mov	edx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv86[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Sentry_bas:
; Line 108
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Sentry_bas
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Sentry_bas:
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 1019
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 1020
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1021
	mov	esi, esp
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1022
	mov	eax, DWORD PTR __Ostr$[ebp]
; Line 1023
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; Line 790
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ecx, OFFSET __9A4948B4_ostream
	call	@__CheckForDebuggerJustMyCode@4
; Line 793
	mov	DWORD PTR __State$[ebp], 0
; Line 794
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx
; Line 795
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv329[ebp], eax
	mov	DWORD PTR tv329[ebp+4], edx
	cmp	DWORD PTR tv329[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv329[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv343[ebp], eax
	mov	DWORD PTR tv343[ebp+4], edx
	mov	eax, DWORD PTR tv343[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv343[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx
; Line 797
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 799
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator
; Line 800
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 801
	jmp	$LN9@operator
$LN8@operator:
; Line 803
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 804
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator
; Line 805
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN26@operator:
; Line 806
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv284[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv285[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv284[ebp]
	push	eax
	mov	ecx, DWORD PTR tv285[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv286[ebp], eax
	mov	ecx, DWORD PTR tv286[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator
; Line 809
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 810
	jmp	SHORT $LN11@operator
$LN12@operator:
; Line 813
	jmp	$LN2@operator
$LN11@operator:
; Line 814
	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN13@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN13@operator
$LN27@operator:
; Line 815
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN13@operator:
; Line 817
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN14@operator
; Line 818
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN14@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN14@operator
$LN28@operator:
; Line 819
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@operator
; Line 822
	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
; Line 823
	jmp	SHORT $LN14@operator
$LN15@operator:
; Line 824
	jmp	$LN5@operator
$LN14@operator:
; Line 825
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:
; Line 826
	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN9@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:
; Line 829
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 830
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]
; Line 831
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@operator:
	DD	1
	DD	$LN31@operator
$LN31@operator:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN29@operator
$LN29@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 540
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eof@?$char_traits@D@std@@SAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 541
	or	eax, -1
; Line 542
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$char_traits@D@std@@SAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 530
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 531
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]
; Line 532
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; Line 460
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0BD42C3B_iosfwd
	call	@__CheckForDebuggerJustMyCode@4
; Line 464
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
; Line 466
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?factorial@@YAHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?factorial@@YAHH@Z PROC					; factorial, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 290
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 291
	cmp	DWORD PTR _n$[ebp], 1
	jg	SHORT $LN2@factorial
	mov	eax, 1
	jmp	SHORT $LN1@factorial
	jmp	SHORT $LN1@factorial
$LN2@factorial:
; Line 292
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	?factorial@@YAHH@Z			; factorial
	add	esp, 4
	imul	eax, DWORD PTR _n$[ebp]
$LN1@factorial:
; Line 293
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?factorial@@YAHH@Z ENDP					; factorial
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?inverse@@YA?AVMat4f@@AAV1@@Z
_TEXT	SEGMENT
tv283 = -488						; size = 4
tv281 = -488						; size = 4
tv279 = -488						; size = 4
tv277 = -488						; size = 4
$T1 = -480						; size = 64
_k$2 = -216						; size = 4
_j$3 = -204						; size = 4
_j$4 = -192						; size = 4
_scaler$5 = -180					; size = 4
_j$6 = -168						; size = 4
_i$7 = -156						; size = 4
_reduce$ = -144						; size = 64
_inverse$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat$ = 12						; size = 4
?inverse@@YA?AVMat4f@@AAV1@@Z PROC			; inverse, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 245
	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-488]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 247
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??0Mat4f@@QAE@XZ			; Mat4f::Mat4f
; Line 248
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _mat$[ebp]
	lea	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR _reduce$[ebp]
	rep movsd
; Line 253
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@inverse
$LN2@inverse:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN4@inverse:
	cmp	DWORD PTR _i$7[ebp], 4
	jge	$LN3@inverse
; Line 256
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN6@inverse
; Line 257
	mov	DWORD PTR _j$6[ebp], 3
	jmp	SHORT $LN7@inverse
$LN5@inverse:
	mov	eax, DWORD PTR _j$6[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$6[ebp], eax
$LN7@inverse:
	cmp	DWORD PTR _j$6[ebp], -1
	jle	SHORT $LN6@inverse
; Line 258
	mov	eax, DWORD PTR _j$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN18@inverse
; Line 259
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _reduce$[ebp]
	push	edx
	call	?swapRow@@YAXAAVMat4f@@HH@Z		; swapRow
	add	esp, 12					; 0000000cH
; Line 260
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _inverse$[ebp]
	push	edx
	call	?swapRow@@YAXAAVMat4f@@HH@Z		; swapRow
	add	esp, 12					; 0000000cH
; Line 261
	jmp	SHORT $LN6@inverse
$LN18@inverse:
; Line 263
	jmp	SHORT $LN5@inverse
$LN6@inverse:
; Line 267
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _scaler$5[ebp], xmm0
; Line 268
	mov	DWORD PTR _j$4[ebp], 0
	jmp	SHORT $LN10@inverse
$LN8@inverse:
	mov	eax, DWORD PTR _j$4[ebp]
	add	eax, 1
	mov	DWORD PTR _j$4[ebp], eax
$LN10@inverse:
	cmp	DWORD PTR _j$4[ebp], 4
	jge	$LN9@inverse
; Line 269
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	divss	xmm0, DWORD PTR _scaler$5[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	lea	ecx, DWORD PTR _reduce$[ebp]
	movss	DWORD PTR tv277[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR tv277[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 270
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	divss	xmm0, DWORD PTR _scaler$5[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	lea	ecx, DWORD PTR _inverse$[ebp]
	movss	DWORD PTR tv279[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$4[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 271
	jmp	$LN8@inverse
$LN9@inverse:
; Line 275
	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN13@inverse
$LN11@inverse:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN13@inverse:
	cmp	DWORD PTR _j$3[ebp], 4
	jge	$LN12@inverse
; Line 278
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR _i$7[ebp]
	je	$LN15@inverse
; Line 279
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _i$7[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _scaler$5[ebp], xmm0
; Line 280
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN16@inverse
$LN14@inverse:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 1
	mov	DWORD PTR _k$2[ebp], eax
$LN16@inverse:
	cmp	DWORD PTR _k$2[ebp], 4
	jge	$LN15@inverse
; Line 281
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reduce$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	movss	xmm0, DWORD PTR _scaler$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _k$2[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _k$2[ebp]
	addss	xmm0, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR _j$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reduce$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _k$2[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 282
	mov	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inverse$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	movss	xmm0, DWORD PTR _scaler$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _k$2[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _k$2[ebp]
	addss	xmm0, DWORD PTR [esi+eax*4]
	mov	ecx, DWORD PTR _j$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inverse$[ebp]
	movss	DWORD PTR tv283[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _k$2[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 283
	jmp	$LN14@inverse
$LN15@inverse:
; Line 285
	jmp	$LN11@inverse
$LN12@inverse:
; Line 286
	jmp	$LN2@inverse
$LN3@inverse:
; Line 287
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _inverse$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 288
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 488				; 000001e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@inverse:
	DD	2
	DD	$LN23@inverse
$LN23@inverse:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN21@inverse
	DD	-144					; ffffff70H
	DD	64					; 00000040H
	DD	$LN22@inverse
$LN22@inverse:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN21@inverse:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
?inverse@@YA?AVMat4f@@AAV1@@Z ENDP			; inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swapRow@@YAXAAVMat4f@@HH@Z
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_temp$ = -20						; size = 16
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
?swapRow@@YAXAAVMat4f@@HH@Z PROC			; swapRow, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 238
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN4@swapRow
$LN2@swapRow:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN4@swapRow:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN3@swapRow
; Line 239
	mov	eax, DWORD PTR _row1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _temp$[ebp+ecx*4], eax
; Line 240
	mov	eax, DWORD PTR _row2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _row1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 241
	mov	eax, DWORD PTR _row2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	edx, DWORD PTR _temp$[ebp+edx*4]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 242
	jmp	SHORT $LN2@swapRow
$LN3@swapRow:
; Line 243
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@swapRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@swapRow:
	DD	1
	DD	$LN7@swapRow
$LN7@swapRow:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN6@swapRow
$LN6@swapRow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?swapRow@@YAXAAVMat4f@@HH@Z ENDP			; swapRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalize@@YA?AVVec4f@@ABV1@@Z
_TEXT	SEGMENT
_norm$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?normalize@@YA?AVVec4f@@ABV1@@Z PROC			; normalize, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 230
	mov	ecx, DWORD PTR _v$[ebp]
	call	?magnitude@Vec4f@@QBEMXZ		; Vec4f::magnitude
	fstp	DWORD PTR _norm$[ebp]
; Line 231
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	divss	xmm0, DWORD PTR _norm$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec4f@@QAE@MMM@Z			; Vec4f::Vec4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 232
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@@YA?AVVec4f@@ABV1@@Z ENDP			; normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dehomogenize@@YA?AVPoint4f@@ABV1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
?dehomogenize@@YA?AVPoint4f@@ABV1@@Z PROC		; dehomogenize, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 219
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	divss	xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Point4f@@QAE@MMMM@Z			; Point4f::Point4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 220
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dehomogenize@@YA?AVPoint4f@@ABV1@@Z ENDP		; dehomogenize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?euclideanDistance@@YAMABVPoint4f@@0@Z
_TEXT	SEGMENT
tv140 = -272						; size = 4
tv148 = -268						; size = 4
tv134 = -264						; size = 4
tv146 = -260						; size = 4
tv128 = -256						; size = 4
__p2$ = -56						; size = 20
__p1$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?euclideanDistance@@YAMABVPoint4f@@0@Z PROC		; euclideanDistance, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 223
	mov	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR __p1$[ebp]
	push	ecx
	call	?dehomogenize@@YA?AVPoint4f@@ABV1@@Z	; dehomogenize
	add	esp, 8
; Line 224
	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR __p2$[ebp]
	push	ecx
	call	?dehomogenize@@YA?AVPoint4f@@ABV1@@Z	; dehomogenize
	add	esp, 8
; Line 226
	push	2
	movss	xmm0, DWORD PTR __p2$[ebp+4]
	subss	xmm0, DWORD PTR __p1$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv128[ebp]
	movss	xmm0, DWORD PTR tv128[ebp]
	push	2
	movss	xmm1, DWORD PTR __p2$[ebp+8]
	subss	xmm1, DWORD PTR __p1$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv146[ebp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv146[ebp]
	addss	xmm0, DWORD PTR tv134[ebp]
	push	2
	movss	xmm1, DWORD PTR __p2$[ebp+12]
	subss	xmm1, DWORD PTR __p1$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv148[ebp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv140[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	addss	xmm0, DWORD PTR tv140[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
; Line 227
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@euclideanD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@euclideanD:
	DD	2
	DD	$LN5@euclideanD
$LN5@euclideanD:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@euclideanD
	DD	-56					; ffffffc8H
	DD	20					; 00000014H
	DD	$LN4@euclideanD
$LN4@euclideanD:
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN3@euclideanD:
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
?euclideanDistance@@YAMABVPoint4f@@0@Z ENDP		; euclideanDistance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVVec4f@@AAVMat4f@@AAV0@@Z
_TEXT	SEGMENT
tv81 = -252						; size = 4
_j$1 = -52						; size = 4
_i$2 = -40						; size = 4
_retVec$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVec4f@@AAVMat4f@@AAV0@@Z PROC			; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 69
	lea	ecx, DWORD PTR _retVec$[ebp]
	call	??0Vec4f@@QAE@XZ			; Vec4f::Vec4f
; Line 71
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN3@operator
; Line 72
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@operator:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@operator
; Line 73
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _retVec$[ebp]
	call	??AVec4f@@QAEAAMH@Z			; Vec4f::operator[]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _j$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??AVec4f@@QAEAAMH@Z			; Vec4f::operator[]
	mov	ecx, DWORD PTR _j$1[ebp]
	movss	xmm0, DWORD PTR [esi+ecx*4]
	mulss	xmm0, DWORD PTR [eax]
	mov	edx, DWORD PTR tv81[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR tv81[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 74
	jmp	SHORT $LN5@operator
$LN6@operator:
; Line 75
	jmp	SHORT $LN2@operator
$LN3@operator:
; Line 76
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _retVec$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _retVec$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _retVec$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _retVec$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _retVec$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 77
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@operator:
	DD	1
	DD	$LN10@operator
$LN10@operator:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN9@operator
$LN9@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
??D@YA?AVVec4f@@AAVMat4f@@AAV0@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVMat4f@@AAV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_scaler$ = 16						; size = 4
??D@YA?AVMat4f@@AAV0@M@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 197
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z	; Mat4f::Mat4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVMat4f@@AAV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVMat4f@@MAAV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_scaler$ = 12						; size = 4
_m$ = 16						; size = 4
??D@YA?AVMat4f@@MAAV0@@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 193
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z	; Mat4f::Mat4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 194
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVMat4f@@MAAV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVMat4f@@AAV0@0@Z
_TEXT	SEGMENT
tv92 = -380						; size = 4
$T1 = -372						; size = 64
_k$2 = -108						; size = 4
_j$3 = -96						; size = 4
_i$4 = -84						; size = 4
_retMat$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??D@YA?AVMat4f@@AAV0@0@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 202
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??0Mat4f@@QAE@XZ			; Mat4f::Mat4f
; Line 203
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _retMat$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AVMat4f@@AAV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _retMat$[ebp]
	rep movsd
; Line 205
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _i$4[ebp], 4
	jge	$LN3@operator
; Line 206
	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN7@operator:
	cmp	DWORD PTR _j$3[ebp], 4
	jge	SHORT $LN6@operator
; Line 208
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN10@operator
$LN8@operator:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 1
	mov	DWORD PTR _k$2[ebp], eax
$LN10@operator:
	cmp	DWORD PTR _k$2[ebp], 4
	jge	SHORT $LN9@operator
; Line 209
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$3[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv92[ebp], edx
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _k$2[ebp]
	mov	ecx, DWORD PTR _j$3[ebp]
	movss	xmm0, DWORD PTR [esi+edx*4]
	mulss	xmm0, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR tv92[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR tv92[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 210
	jmp	SHORT $LN8@operator
$LN9@operator:
; Line 211
	jmp	$LN5@operator
$LN6@operator:
; Line 212
	jmp	$LN2@operator
$LN3@operator:
; Line 214
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _retMat$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 215
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@operator:
	DD	1
	DD	$LN13@operator
$LN13@operator:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN12@operator
$LN12@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??D@YA?AVMat4f@@AAV0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?AVMat4f@@AAV0@0@Z
_TEXT	SEGMENT
tv134 = -296						; size = 4
_j$1 = -96						; size = 4
_i$2 = -84						; size = 4
_retMat$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??G@YA?AVMat4f@@AAV0@0@Z PROC				; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 180
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??0Mat4f@@QAE@XZ			; Mat4f::Mat4f
; Line 182
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN3@operator
; Line 183
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@operator:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@operator
; Line 184
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR _j$1[ebp]
	movss	xmm0, DWORD PTR [esi+edx*4]
	subss	xmm0, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	lea	ecx, DWORD PTR _retMat$[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$1[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 185
	jmp	SHORT $LN5@operator
$LN6@operator:
; Line 186
	jmp	SHORT $LN2@operator
$LN3@operator:
; Line 188
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _retMat$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 189
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@operator:
	DD	1
	DD	$LN10@operator
$LN10@operator:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN9@operator
$LN9@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??G@YA?AVMat4f@@AAV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?AVMat4f@@AAV0@0@Z
_TEXT	SEGMENT
tv134 = -296						; size = 4
_j$1 = -96						; size = 4
_i$2 = -84						; size = 4
_retMat$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??H@YA?AVMat4f@@AAV0@0@Z PROC				; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 167
	lea	ecx, DWORD PTR _retMat$[ebp]
	call	??0Mat4f@@QAE@XZ			; Mat4f::Mat4f
; Line 169
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@operator:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN3@operator
; Line 170
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@operator:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@operator
; Line 171
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m2$[ebp]
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR _j$1[ebp]
	movss	xmm0, DWORD PTR [esi+edx*4]
	addss	xmm0, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	lea	ecx, DWORD PTR _retMat$[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
	call	??AMat4f@@QAEPAMH@Z			; Mat4f::operator[]
	mov	ecx, DWORD PTR _j$1[ebp]
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
; Line 172
	jmp	SHORT $LN5@operator
$LN6@operator:
; Line 173
	jmp	SHORT $LN2@operator
$LN3@operator:
; Line 175
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _retMat$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@operator:
	DD	1
	DD	$LN10@operator
$LN10@operator:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN9@operator
$LN9@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??H@YA?AVMat4f@@AAV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?identity@Mat4f@@SA?AV1@XZ
_TEXT	SEGMENT
_m$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?identity@Mat4f@@SA?AV1@XZ PROC				; Mat4f::identity, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 160
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0Mat4f@@QAE@XZ			; Mat4f::Mat4f
; Line 161
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _m$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 162
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@identity
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@identity:
	DD	1
	DD	$LN4@identity
$LN4@identity:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN3@identity
$LN3@identity:
	DB	109					; 0000006dH
	DB	0
?identity@Mat4f@@SA?AV1@XZ ENDP				; Mat4f::identity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Mat4f@@QAEXXZ
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?print@Mat4f@@QAEXXZ PROC				; Mat4f::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 150
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@print
$LN2@print:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@print:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	$LN3@print
; Line 151
	push	OFFSET ??_C@_02PFNDMDBO@?$FL?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 152
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@print
$LN5@print:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@print:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@print
; Line 153
	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 154
	jmp	SHORT $LN5@print
$LN6@print:
; Line 155
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 156
	jmp	$LN2@print
$LN3@print:
; Line 157
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Mat4f@@QAEXXZ ENDP				; Mat4f::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AMat4f@@QAEPAMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_row$ = 8						; size = 4
??AMat4f@@QAEPAMH@Z PROC				; Mat4f::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 145
	mov	eax, DWORD PTR _row$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 146
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AMat4f@@QAEPAMH@Z ENDP				; Mat4f::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4f@@QAE@QAY03$$CBM@Z
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_values$ = 8						; size = 4
??0Mat4f@@QAE@QAY03$$CBM@Z PROC				; Mat4f::Mat4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 136
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Mat4f
$LN2@Mat4f:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Mat4f:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN3@Mat4f
; Line 137
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@Mat4f
$LN5@Mat4f:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@Mat4f:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@Mat4f
; Line 138
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _values$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	esi, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 139
	jmp	SHORT $LN5@Mat4f
$LN6@Mat4f:
; Line 140
	jmp	SHORT $LN2@Mat4f
$LN3@Mat4f:
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Mat4f@@QAE@QAY03$$CBM@Z ENDP				; Mat4f::Mat4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v00$ = 8						; size = 4
_v01$ = 12						; size = 4
_v02$ = 16						; size = 4
_v03$ = 20						; size = 4
_v10$ = 24						; size = 4
_v11$ = 28						; size = 4
_v12$ = 32						; size = 4
_v13$ = 36						; size = 4
_v20$ = 40						; size = 4
_v21$ = 44						; size = 4
_v22$ = 48						; size = 4
_v23$ = 52						; size = 4
_v30$ = 56						; size = 4
_v31$ = 60						; size = 4
_v32$ = 64						; size = 4
_v33$ = 68						; size = 4
??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z PROC			; Mat4f::Mat4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 117
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _v00$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 118
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _v01$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 119
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _v02$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 120
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _v03$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 121
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _v10$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 122
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _v11$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 123
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _v12$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 124
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _v13$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 125
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _v20$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 126
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _v21$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 127
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _v22$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0
; Line 128
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _v23$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
; Line 129
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _v30$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 130
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _v31$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 131
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _v32$[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
; Line 132
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _v33$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0Mat4f@@QAE@MMMMMMMMMMMMMMMM@Z ENDP			; Mat4f::Mat4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mat4f@@QAE@XZ
_TEXT	SEGMENT
tv74 = -232						; size = 4
_j$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
??0Mat4f@@QAE@XZ PROC					; Mat4f::Mat4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 109
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Mat4f
$LN2@Mat4f:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Mat4f:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN3@Mat4f
; Line 110
	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@Mat4f
$LN5@Mat4f:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@Mat4f:
	cmp	DWORD PTR _j$1[ebp], 4
	jge	SHORT $LN6@Mat4f
; Line 111
	mov	eax, DWORD PTR _j$1[ebp]
	cmp	eax, DWORD PTR _i$2[ebp]
	jne	SHORT $LN9@Mat4f
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN10@Mat4f
$LN9@Mat4f:
	mov	DWORD PTR tv74[ebp], 0
$LN10@Mat4f:
	cvtsi2ss xmm0, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _j$1[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
; Line 112
	jmp	SHORT $LN5@Mat4f
$LN6@Mat4f:
; Line 113
	jmp	SHORT $LN2@Mat4f
$LN3@Mat4f:
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Mat4f@@QAE@XZ ENDP					; Mat4f::Mat4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getPointAt@Ray@@QAE?AVPoint4f@@M@Z
_TEXT	SEGMENT
_scaled$ = -40						; size = 20
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_t$ = 12						; size = 4
?getPointAt@Ray@@QAE?AVPoint4f@@M@Z PROC		; Ray::getPointAt, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 102
	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR _scaled$[ebp]
	push	ecx
	call	??D@YA?AVVec4f@@ABV0@M@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 103
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR _scaled$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR _scaled$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR _scaled$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Point4f@@QAE@MMMM@Z			; Point4f::Point4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 104
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@getPointAt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@getPointAt:
	DD	1
	DD	$LN4@getPointAt
$LN4@getPointAt:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN3@getPointAt
$LN3@getPointAt:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?getPointAt@Ray@@QAE?AVPoint4f@@M@Z ENDP		; Ray::getPointAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Ray@@QAE@ABVPoint4f@@ABVVec4f@@@Z
_TEXT	SEGMENT
$T1 = -256						; size = 20
$T2 = -228						; size = 20
_this$ = -8						; size = 4
_origin$ = 8						; size = 4
_dir$ = 12						; size = 4
??0Ray@@QAE@ABVPoint4f@@ABVVec4f@@@Z PROC		; Ray::Ray, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Point4f@@QAE@XZ			; Point4f::Point4f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vec4f@@QAE@XZ			; Vec4f::Vec4f
; Line 96
	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?dehomogenize@@YA?AVPoint4f@@ABV1@@Z	; dehomogenize
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax
; Line 97
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?normalize@@YA?AVVec4f@@ABV1@@Z		; normalize
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Ray@@QAE@ABVPoint4f@@ABVVec4f@@@Z ENDP		; Ray::Ray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Print@Point4f@@QAEXXZ
_TEXT	SEGMENT
tv165 = -212						; size = 4
tv163 = -208						; size = 4
_this$ = -8						; size = 4
?Print@Point4f@@QAEXXZ PROC				; Point4f::Print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 90
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ@
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ebx, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	eax, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ecx, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_01ODHLEDKK@?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	mov	DWORD PTR tv163[ebp], eax
	mov	DWORD PTR tv165[ebp], ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv165[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv163[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Print@Point4f@@QAEXXZ ENDP				; Point4f::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Point4f@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p2$ = 8						; size = 4
??0Point4f@@QAE@ABV0@@Z PROC				; Point4f::Point4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Point4f@@QAE@ABV0@@Z ENDP				; Point4f::Point4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Point4f@@QAE@MMMM@Z
_TEXT	SEGMENT
tv157 = -224						; size = 4
tv167 = -220						; size = 4
tv149 = -216						; size = 4
tv165 = -212						; size = 4
tv141 = -208						; size = 4
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??0Point4f@@QAE@MMMM@Z PROC				; Point4f::Point4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __w$[ebp]
	movss	DWORD PTR [eax+16], xmm0
; Line 84
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv141[ebp]
	movss	xmm0, DWORD PTR tv141[ebp]
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	divss	xmm1, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv165[ebp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv149[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	addss	xmm0, DWORD PTR tv149[ebp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	divss	xmm1, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv167[ebp], xmm0
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR tv167[ebp]
	addss	xmm0, DWORD PTR tv157[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Point4f@@QAE@MMMM@Z ENDP				; Point4f::Point4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Point4f@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Point4f@@QAE@XZ PROC					; Point4f::Point4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Point4f@@QAE@XZ ENDP					; Point4f::Point4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVVec4f@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_scaler$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVec4f@@MABV0@@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 64
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec4f@@QAE@MMM@Z			; Vec4f::Vec4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 65
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVec4f@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??D@YA?AVVec4f@@ABV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scaler$ = 16						; size = 4
??D@YA?AVVec4f@@ABV0@M@Z PROC				; operator*, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 60
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _scaler$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec4f@@QAE@MMM@Z			; Vec4f::Vec4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVVec4f@@ABV0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??G@YA?AVVec4f@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVVec4f@@ABV0@0@Z PROC				; operator-, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 56
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec4f@@QAE@MMM@Z			; Vec4f::Vec4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 57
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVVec4f@@ABV0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??H@YA?AVVec4f@@ABV0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??H@YA?AVVec4f@@ABV0@0@Z PROC				; operator+, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 52
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec4f@@QAE@MMM@Z			; Vec4f::Vec4f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 53
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVVec4f@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AVec4f@@QAEAAMH@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_row$ = 8						; size = 4
??AVec4f@@QAEAAMH@Z PROC				; Vec4f::operator[], COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 36
	mov	eax, DWORD PTR _row$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN1@operator
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@operator[ecx*4]
$LN4@operator:
; Line 39
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	SHORT $LN1@operator
$LN5@operator:
; Line 41
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	jmp	SHORT $LN1@operator
$LN6@operator:
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	jmp	SHORT $LN1@operator
$LN7@operator:
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
$LN1@operator:
; Line 49
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@operator:
	DD	$LN4@operator
	DD	$LN5@operator
	DD	$LN6@operator
	DD	$LN7@operator
??AVec4f@@QAEAAMH@Z ENDP				; Vec4f::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@Vec4f@@QAEMV1@@Z
_TEXT	SEGMENT
tv80 = -208						; size = 4
_this$ = -8						; size = 4
_v2$ = 8						; size = 20
?dot@Vec4f@@QAEMV1@@Z PROC				; Vec4f::dot, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _v2$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _v2$[ebp+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR _v2$[ebp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR tv80[ebp], xmm0
	fld	DWORD PTR tv80[ebp]
; Line 32
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?dot@Vec4f@@QAEMV1@@Z ENDP				; Vec4f::dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?print@Vec4f@@QAEXXZ
_TEXT	SEGMENT
tv149 = -208						; size = 4
_this$ = -8						; size = 4
?print@Vec4f@@QAEXXZ PROC				; Vec4f::print, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 27
	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	mov	edi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	ebx, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02KEGNLNML@?0?5@
	mov	eax, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_01MNNFJEPP@?$DM@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	mov	DWORD PTR tv149[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	ecx, DWORD PTR tv149[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 28
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print@Vec4f@@QAEXXZ ENDP				; Vec4f::print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?magnitude@Vec4f@@QBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?magnitude@Vec4f@@QBEMXZ PROC				; Vec4f::magnitude, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.h
; Line 21
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __22C4B482_math_old@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?magnitude@Vec4f@@QBEMXZ ENDP				; Vec4f::magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec4f@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec4f@@QAE@MMM@Z PROC				; Vec4f::Vec4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 18
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax+4], xmm0
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+8], xmm0
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+12], xmm0
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+16], xmm0
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [edx+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]
; Line 23
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec4f@@QAE@MMM@Z ENDP				; Vec4f::Vec4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Vec4f@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vec4f@@QAE@XZ PROC					; Vec4f::Vec4f, COMDAT
; _this$ = ecx
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
; Line 10
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
; Line 11
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0
; Line 12
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+12], xmm0
; Line 13
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+16], xmm0
; Line 14
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec4f@@QAE@XZ ENDP					; Vec4f::Vec4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\cmath
; Line 294
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sqrt@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0514C0B9_cmath
	call	@__CheckForDebuggerJustMyCode@4
; Line 295
	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
; Line 296
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?sqrt@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sqrt@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pow@@YAMMH@Z
_TEXT	SEGMENT
tv75 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?pow@@YAMMH@Z PROC					; pow, COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\cmath
; Line 245
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?pow@@YAMMH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __0514C0B9_cmath
	call	@__CheckForDebuggerJustMyCode@4
; Line 246
	cmp	DWORD PTR __Yx$[ebp], 2
	jne	SHORT $LN2@pow
; Line 247
	movss	xmm0, DWORD PTR __Xx$[ebp]
	mulss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
	fld	DWORD PTR tv75[ebp]
	jmp	SHORT $LN1@pow
$LN2@pow:
; Line 249
	cvtsi2ss xmm0, DWORD PTR __Yx$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_powf
	add	esp, 8
$LN1@pow:
; Line 250
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?pow@@YAMMH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?pow@@YAMMH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?pow@@YAMMH@Z ENDP					; pow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; Line 759
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EDC08FAA_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4
; Line 760
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv72[ebp]
	fld	DWORD PTR tv72[ebp]
; Line 761
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _powf
_TEXT	SEGMENT
tv75 = -196						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; Line 744
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EDC08FAA_corecrt_math@h
	call	@__CheckForDebuggerJustMyCode@4
; Line 745
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv75[ebp]
	fld	DWORD PTR tv75[ebp]
; Line 746
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
; File d:\edx\raytracer\raytracer\math_old.cpp
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6D648B3_math_old@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
